#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: f8479f7a-8439-429d-90c7-0d5134ef56e2
# Source File: ManateeUsmt.psf
# Changelog:
# 2017.09.29 Brian Gonzalez
# * Changed query for restore points to pull folders using regex [0-9]{5}.
# * Set ShareList calls to use ShareList.text instead of ShareList.SelectedItem.
#------------------------------------------------------------------------

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.143
     Generated on:       9/28/2017 9:15 AM
     Generated by:       Brian Gonzalez
     Organization:       Panasonic
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2017
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-ManateeUsmt_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formManateeCountyUSMT10 = New-Object 'System.Windows.Forms.Form'
	$TableLayout = New-Object 'System.Windows.Forms.TableLayoutPanel'
	$BackupLabel = New-Object 'System.Windows.Forms.Label'
	$ShareList = New-Object 'System.Windows.Forms.ComboBox'
	$StatusBox = New-Object 'System.Windows.Forms.TextBox'
	$ProgressBar = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$BackupButton = New-Object 'System.Windows.Forms.Button'
	$EstimateButton = New-Object 'System.Windows.Forms.Button'
	$BackupUserName = New-Object 'System.Windows.Forms.ComboBox'
	$RestoreButton = New-Object 'System.Windows.Forms.Button'
	$UpdateButton = New-Object 'System.Windows.Forms.Button'
	$StopButton = New-Object 'System.Windows.Forms.Button'
	$RestoreName = New-Object 'System.Windows.Forms.ComboBox'
	$RestoreLabel = New-Object 'System.Windows.Forms.Label'
	$OutputBox = New-Object 'System.Windows.Forms.RichTextBox'
	$tailbutton = New-Object 'System.Windows.Forms.Button'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formManateeCountyUSMT10_Load = {
		Cleanup-Logs
		$global:sScriptDirectory = Get-ScriptDirectory
		Add-OutputBoxText -Bold -Text ('USMT tool is started from the "{0}" directory.' -f $sScriptDirectory)
		Build-Form
	}
	
	$UpdateButton_Click = {
		Update-RestoreNames
	}
	
	$EstimateButton_Click = {
		$OutputBox.Focus()
		if (-not (Validate-Form)) { return }
		$ProgressBar.Style = 'Marquee'
		$ProgressBar.TextOverlay = "Running..."
		Toggle-Controls
		$sUserName = $($BackupUserName.Text)
		$sStorePath = Join-Path -Path $($ShareList.Text) -ChildPath $env:COMPUTERNAME
		$sScanStateCmd = ".\scanstate.exe ""$sStorePath"" $sScanStateArgs /p:""$env:TEMP\Estimate.xml"" /l:""$($env:TEMP)\ScanState.log"" /ue:* /ui:""$sUserName"""
		$sbEstimate = [System.Management.Automation.ScriptBlock]::Create("Set-Location ""$sUsmtFilesPath""; & $sScanStateCmd")
		$StatusBox.Text = ('Running scanstate with estimate call for user: {0}.' -f $sUserName)
		$tailbutton.Text = "$($env:TEMP)\ScanState.log"
		$tailbutton.add_Click($TailLog)
		$tailbutton.Enabled = $true
		Add-OutputBoxText -Text ('Estimate started for system: {0}.' -f $env:COMPUTERNAME)
		Add-OutputBoxText -Text ('Executing: {0}' -f $sScanStateCmd)
		$sLastLogEntry = ''
		Add-JobTracker `
					   -Name 'EstimateJob' `
					   -JobScript $sbEstimate `
					   -CompletedScript {
			Param ($Job)
			$ProgressBar.Style = 'Blocks'
			$ProgressBar.Value = 100
			$ProgressBar.TextOverlay = "Estimate completed."
			Toggle-Controls
			If (Test-Path -Path "$env:TEMP\Estimate.xml")
			{
				$xml = [xml](Get-Content -Path "$env:TEMP\Estimate.xml")
				$node = $xml.PreMigration.storeSize.size | ? { $_.clusterSize -eq 4096 }
				if ($node -eq $null)
				{
					$node = $xml.PreMigration.storeSize.size | ? { $_.clusterSize -eq 0 }
				}
				$iEstimate = [math]::Round($node.InnerText / 1mb, 2)
				$StatusBox.Text = ('Estimate is {0} mb' -f $iEstimate)
				Add-OutputBoxText -Text ('Estimate routine is complete and returned a {0} mb estimate.' -f $iEstimate)
			}
			else
			{
				Add-OutputBoxText -Color Red -Bold -Text "Estimate routine is complete and no estimate was returned."
			}
		}`
					   -UpdateScript {
			Param ($Job)
		}
	}
	
	$BackupButton_Click = {
		$OutputBox.Focus()
		if (-not (Validate-Form)) { return }
		Cleanup-Logs
		Toggle-Controls
		$ProgressBar.Style = 'Blocks'
		$ProgressBar.Value = 0
		$ProgressBar.TextOverlay = ""
		$sUserName = $($BackupUserName.Text)
		$sStorePath = Join-Path -Path $($ShareList.Text) -ChildPath $($env:COMPUTERNAME)
		$sScanStateCmd = ".\scanstate.exe ""$sStorePath"" $sScanStateArgs /progress:""$($env:TEMP)\UsmtProgress.log"" /l:""$($env:TEMP)\ScanState.log"" /listfiles:""$($env:TEMP)\ScanStateListing.log"" /ue:* /ui:""$sUserName"""
		$sbBackup = [System.Management.Automation.ScriptBlock]::Create("Set-Location ""$sUsmtFilesPath""; & $sScanStateCmd")
		$StatusBox.Text = ('Backup started for user/s: {0}...' -f $sUserName)
		$tailbutton.Text = "$($env:TEMP)\ScanState.log"
		$tailbutton.add_Click($TailLog)
		$tailbutton.Enabled = $true
		Add-OutputBoxText -Text ("Backup started for user/s: {0}." -f $sUserName)
		Add-OutputBoxText -Text ('Executing: {0}' -f $sScanStateCmd)
		$sLastLogEntry = ''
		Add-JobTracker `
					   -Name 'BackupJob' `
					   -JobScript $sbBackup `
					   -CompletedScript {
			Param ($Job)
			$ProgressBar.Value = 100
			$ProgressBar.TextOverlay = "Backup complete"
			Toggle-Controls
			if (Test-Path -Path "$($env:TEMP)\ScanStateListing.log")
			{
				Add-OutputBoxText -Bold -Text 'Listing of Backed up files(%TEMP%\ScanStateListing.log):'
				Get-Content -Path "$($env:TEMP)\ScanStateListing.log" | % { Add-OutputBoxText -Text $_ }
			}
			Add-OutputBoxText -Text "Backup completed."
			$StatusBox.Text = "Backup completed."
		}`
					   -UpdateScript {
			Param ($Job)
			if (Test-Path -Path "$($env:TEMP)\UsmtProgress.log")
			{
				$oProgress = Get-Content -Path "$($env:TEMP)\UsmtProgress.log" | Select-Object -Last 1
				$iProgress = $oProgress -imatch "totalPercentageCompleted, ([0-9]{1,3})"
				if ($iProgress)
				{
					$ProgressBar.Value = $Matches[1]
				}
			}
		}
	}
	
	$RestoreButton_Click = {
		$OutputBox.Focus()
		$sRestorePointName = $($RestoreName.SelectedItem)
		if (-not (Validate-Form)) { return }
		Toggle-Controls
		Cleanup-Logs
		$ProgressBar.Style = 'Blocks'
		$ProgressBar.Value = 0
		$ProgressBar.TextOverlay = ""
		$sStorePath = Join-Path -Path $($ShareList.Text) -ChildPath $sRestorePointName
		$sLoadStateCmd = ".\loadstate.exe ""$sStorePath"" $sLoadStateArgs /progress:""$($env:TEMP)\UsmtProgress.log"" /l:""$($env:TEMP)\LoadState.log"""
		$sbRestore = [System.Management.Automation.ScriptBlock]::Create("Set-Location ""$sUsmtFilesPath""; & $sLoadStateCmd")
		$StatusBox.Text = ('Performing restore: {0}...' -f $sUserName)
		$tailbutton.Text = "$($env:TEMP)\LoadState.log"
		$tailbutton.add_Click($TailLog)
		$tailbutton.Enabled = $true
		Add-OutputBoxText -Text ("Restore started using the {0}'s restore point." -f $sRestorePointName)
		Add-OutputBoxText -Text ('Executing: {0}' -f $sLoadStateCmd)
		$sLastLogEntry = ''
		Add-JobTracker `
					   -Name 'RestoreJob' `
					   -JobScript $sbRestore `
					   -CompletedScript {
			Param ($Job)
			$ProgressBar.Value = 100
			$ProgressBar.TextOverlay = "Restore complete"
			Toggle-Controls
			Add-OutputBoxText -Bold -Text "Restore completed."
			$StatusBox.Text = "Restore completed."
		}`
					   -UpdateScript {
			Param ($Job)
			If (Test-Path -Path "$($env:TEMP)\UsmtProgress.log")
			{
				$oProgress = Get-Content -Path "$($env:TEMP)\UsmtProgress.log" | Select-Object -Last 1
				$iProgress = $oProgress -imatch "totalPercentageCompleted, ([0-9]{1,3})"
				if ($iProgress)
				{
					$ProgressBar.Value = $Matches[1]
				}
			}
		}
	}
	
	$StopButton_Click = {
		$ProgressBar.Value = 0
		$ProgressBar.Style = 'Blocks'
		Toggle-Controls
		Stop-JobTracker
		Add-OutputBoxText -Color Red -Text ('Error: Last action cancelled.')
		$StatusBox.Text = ("Last action cancelled.")
	}
	
	$TailLog = {
		$Path = $tailbutton.Text
		if (Test-Path -Path $Path)
		{
			if (Test-Path -Path "$sUsmtFilesPath\tail.exe")
			{
				Add-OutputBoxText -Color Green -Text "Info: executing $sUsmtFilesPath\tail.exe ""$Path"""
				$TailCmd = ".\tail.exe $Path"
				$sbTail = [System.Management.Automation.ScriptBlock]::Create("Set-Location ""$sUsmtFilesPath""; & $TailCmd")
				Add-JobTracker -Name 'TailJob' -JobScript $sbTail
			}
			else
			{
				Add-OutputBoxText -Color Red -Text "Error: $sUsmtFilesPath\tail.exe not found."
				return $false
			}
		}
		else
		{
			Add-OutputBoxText -Color Red -Text "Error: $Path not found."
			return $false
		}
	}
		
	$DeSelectTextFix = {
		$ShareList.Select(0, 0)
		$RestoreName.Select(0, 0)
		$BackupUserName.Select(0, 0)
	}
	
	#region Custom Functions
	function Get-UserProfiles
	{
	<#
		.SYNOPSIS
			Gets local profile names
		
		.DESCRIPTION
			Grabs local profile names including domain name (i.e. BSO\Brian)
		
		.EXAMPLE
					PS C:\> Get-UserProfiles
		
		.NOTES
			Additional information about the function.
	#>
		[CmdletBinding()]
		[OutputType([System.Collections.ArrayList])]
		param ()
		
		$aUserNames = New-Object System.Collections.ArrayList
		$aUserNames.Add("$($env:USERDOMAIN)\*") | Out-Null
		Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\*' | `
		% {
			$oSID = New-Object System.Security.Principal.SecurityIdentifier($_.PSChildName)
			$oUserName = $oSID.Translate([System.Security.Principal.NTAccount]).Value
			$aUserNames.Add($oUserName) | Out-Null
		}
		$aUserNames.Remove("NT AUTHORITY\SYSTEM")
		$aUserNames.Remove("NT AUTHORITY\LOCAL SERVICE")
		$aUserNames.Remove("NT AUTHORITY\NETWORK SERVICE")
		$aUserNames.Remove("$($env:COMPUTERNAME)\Administrator")
		return $aUserNames
	}
	
	function Get-ScriptDirectory
	{
		<#
			.SYNOPSIS
				Get-ScriptDirectory returns the proper location of the script.
		
			.OUTPUTS
				System.String
			
			.NOTES
				Returns the correct path within a packaged executable.
		#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	function Validate-Form
	{
		If ($($BackupUserName.Text) -eq $null)
		{
			Add-OutputBoxText -Color Red -Text 'Error: You must specify a username.'
			return $false
		}
		If ($($ShareList.Text) -eq $null)
		{
			Add-OutputBoxText -Color Red -Text 'Error: You must specify a server share to store/pull USMT data.'
			return $false
		}
		if (-not (Test-Path $($ShareList.Text)))
		{
			Add-OutputBoxText -Color Red -Text ('Error: The server share "{ 0 }" is not accessible.' -f $($ShareList.Text))
			return $false
		}
		return $true
	}
	
	function Update-RestoreNames
	{
		$ProgressBar.Style = 'Marquee'
		$ProgressBar.TextOverlay = "Attempting to connect to share..."
		Toggle-Controls
		$sbValidateServer = [System.Management.Automation.ScriptBlock]::Create(('Test-Path {0}' -f $($ShareList.Text)))
		Add-JobTracker `
					   -Name 'ValidateServer' `
					   -JobScript $sbValidateServer `
					   -CompletedScript {
			Param ($Job)
			$results = Receive-Job -Job $Job
			if ($results)
			{
				$RestoreName.Items.Clear()
				$oShareFolder = Get-ChildItem $($ShareList.Text) | ? {$_.PSIsContainer} | ? { $_.Name -imatch '^[0-9]{5}' }
				if ($oShareFolder -ne $null)
				{
					$oShareFolder | % { Update-ComboBox $RestoreName $($_.Name) -Append }
					$RestoreName.Enabled = $true
				}
				
				if ($RestoreName.Items.Count -gt 0)
				{
					$RestoreName.SelectedIndex = 0
					Add-OutputBoxText -Color Green -Text ('Info: Updated restore name combobox with {0} items from {1}.' -f $($RestoreName.Items.Count), $($ShareList.Test))
				}
				else
				{
					$RestoreName.Enabled = $false
					Add-OutputBoxText -Color Orange -Text ('Error: No USMT state stores found from selected server share ({0}).' -f $($ShareList.Text))
				}
			}
			else
			{
				Add-OutputBoxText -Color Red -Text ('Error: Cannot connect to specified server share ({0}).' -f $($ShareList.Text))
			}
			$ProgressBar.Style = 'Blocks'
			$ProgressBar.Value = 0
			$ProgressBar.TextOverlay = ""
			Toggle-Controls
		}
	}
	
	function Toggle-Controls
	{
		if ($BackupButton.Enabled -eq $true)
		{
			$BackupButton.Enabled = $false
			$RestoreButton.Enabled = $false
			$EstimateButton.Enabled = $false
			$UpdateButton.Enabled = $false
			$RestoreName.Enabled = $false
			$BackupUserName.Enabled = $false
			$ShareList.Enabled = $false
			$StopButton.Enabled = $true
			$StopButton.BackColor = 'Red'
			$ShareList.Select(0, 0)
			$RestoreName.Select(0, 0)
			$BackupUserName.Select(0, 0)
		}
		else
		{
			$BackupButton.Enabled = $true
			$RestoreButton.Enabled = $true
			$EstimateButton.Enabled = $true
			$UpdateButton.Enabled = $true
			$RestoreName.Enabled = $true
			$BackupUserName.Enabled = $true
			$ShareList.Enabled = $true
			$StopButton.Enabled = $false
			$StopButton.BackColor = 'Gray'
		}
	}
	
	function Add-OutputBoxText
	{
		Param (
			[parameter(Mandatory = $true)]
			[String]$Text,
			[ValidateSet('Green', 'Red', 'Black', 'Orange')]
			[String]$Color,
			[Switch]$Header,
			[Switch]$Bold
		)
		$C = Switch ($Color)
		{
			'Green' { 'Green' }
			'Red' { 'Red' }
			'Black' { 'Black' }
			'Orange' { 'Orange' }
			Default { 'Black' }
		}
		if ($Header)
		{
			$Text = (Get-Date).ToString('HH:mm:ss') + ': ' + $Text
			
			$oldFont = $OutputBox.Font
			$OutputBox.SelectionFont = New-Object Drawing.Font($oldFont.FontFamily, ($($oldFont.Size) + 5), [Drawing.FontStyle]::Bold)
			$OutputBox.SelectionColor = "$C"
			$OutputBox.AppendText("`n$Text")
		}
		elseif ($Bold)
		{
			$Text = (Get-Date).ToString('HH:mm:ss') + ': ' + $Text
			
			$oldFont = $OutputBox.Font
			$OutputBox.SelectionFont = New-Object Drawing.Font($oldFont.FontFamily, $oldFont.Size, [Drawing.FontStyle]::Bold)
			$OutputBox.SelectionColor = "$C"
			$OutputBox.AppendText("`n$Text")
		}
		else
		{
			$Text = (Get-Date).ToString('HH:mm:ss') + ': ' + $Text
			
			$oldFont = $OutputBox.Font
			$OutputBox.SelectionFont = New-Object Drawing.Font($oldFont.FontFamily, $oldFont.Size, [Drawing.FontStyle]::Regular)
			$OutputBox.SelectionColor = "$C"
			$OutputBox.AppendText("`n$Text")
		}
	}
	
	function Build-Form
	{
		Update-ComboBox $BackupUserName (Get-UserProfiles) -Append
		$BackupUserName.SelectedIndex = 0
		$sConfigurationPath = "$sScriptDirectory\Configuration.xml"
		If (Test-Path -Path $sConfigurationPath)
		{
			$xml = [xml](Get-Content -Path $sConfigurationPath)
			$oDefaultGateway = gwmi -query "Select DefaultIPGateway From Win32_NetworkAdapterConfiguration"
			
			foreach ($dg in $($oDefaultGateway))
			{
				$xml.usmttool.shares.share | `
				foreach {
					if ($dg.DefaultIPGateway -eq $($_.gateway))
					{
						Update-ComboBox $ShareList $($_.innerxml) -Append
						$ShareList.Text = $($_.innerxml)
						Add-OutputBoxText -Color Green -Text ('Info: Added {0} to share listing.' -f $($_.innerxml))
						Update-RestoreNames
					}
					if ($_.default -eq "true")
					{
						$sFallBackGateway = $($_.innerxml)
					}
				}
			}
			if (($ShareList.Text -eq $null) -and ($sFallBackGateway -ne $null))
			{
				Update-ComboBox $ShareList  $sFallBackGateway -Append
				$ShareList.Text = $sFallBackGateway
				Add-OutputBoxText -Color Green -Text ('Info:Added Default share of "{0}".' -f $sFallBackGateway)
				Update-RestoreNames
			}
			$global:sLoadStateArgs = $xml.usmttool.arguments.loadstate.'#cdata-section'
			Add-OutputBoxText -Color Green -Text ('Info: Added "{0}" to loadstate arguments.' -f $sLoadStateArgs)
			$global:sScanStateArgs = $xml.usmttool.arguments.scanstate.'#cdata-section'
			Add-OutputBoxText -Color Green -Text ('Info: Added "{0}" to scanstate arguments.' -f $sScanStateArgs)
			$global:sScanStateLogPath = [System.Environment]::ExpandEnvironmentVariables($($xml.usmttool.logs.scanstate))
			Add-OutputBoxText -Color Green -Text ('Info: Added to scanstate log path "{0}".' -f $sScanStateLogPath)
			$global:sLoadStateLogPath = [System.Environment]::ExpandEnvironmentVariables($($xml.usmttool.logs.loadstate))
			Add-OutputBoxText -Color Green -Text ('Info: Added to loadstate log path "{0}".' -f $sLoadStateLogPath)
			Add-OutputBoxText -Color Green -Text ('Info: Close usmt tool before opening desired log files.')
			$global:sUsmtFilesPath = $xml.usmttool.files
			if (Test-Path("$sScriptDirectory\$sUsmtFilesPath\scanstate.exe"))
			{
				$global:sUsmtFilesPath = "$sScriptDirectory\$sUsmtFilesPath"
				Add-OutputBoxText -Color Green -Text ('Info: Valid USMT files path set to {0}.' -f $sUsmtFilesPath)
			}
			elseif (Test-Path("$sUsmtFilesPath\scanstate.exe"))
			{
				Add-OutputBoxText -Color Red -Text ('Info: Valid USMT files path set to { 0 }.' -f $sUsmtFilesPath)
			}
			
		}
		else
		{
			Add-OutputBoxText -Color Red -Text ('Configuration xml file not found ({0}).' -f $sConfigurationPath)
		}
	}
	
	function Cleanup-Logs
	{
		[CmdletBinding()]
		param ()
		
		if (Test-Path "$env:TEMP\ScanState.log")
		{
			Remove-Item "$env:TEMP\ScanState.log" -Force
		}
		if (Test-Path "$env:TEMP\LoadState.log")
		{
			Remove-Item "$env:TEMP\LoadState.log" -Force
		}
		if (Test-Path "$env:TEMP\EstimateScanState.log")
		{
			Remove-Item "$env:TEMP\EstimateScanState.log" -Force
		}
		if (Test-Path "$env:TEMP\UsmtProgress.log")
		{
			Remove-Item "$env:TEMP\UsmtProgress.log" -Force
		}
	}
		
	#endregion
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	#region Job Tracker
	$JobTrackerList = New-Object System.Collections.ArrayList
	function Add-JobTracker
	{
		<#
			.SYNOPSIS
				Add a new job to the JobTracker and starts the timer.
		
			.DESCRIPTION
				Add a new job to the JobTracker and starts the timer.
		
			.PARAMETER  Name
				The name to assign to the Job
		
			.PARAMETER  JobScript
				The script block that the Job will be performing. 
				Important: Do not access form controls from this script block.
		
			.PARAMETER ArgumentList
				The arguments to pass to the job
		
			.PARAMETER  CompleteScript
				The script block that will be called when the job is complete.
				The job is passed as an argument. The Job argument is null when the job fails.
		
			.PARAMETER  UpdateScript
				The script block that will be called each time the timer ticks. 
				The job is passed as an argument. Use this to get the Job's progress.
		
			.EXAMPLE
				Add-JobTracker -Name 'JobName' `
				-JobScript {	
					Param($Argument1)#Pass any arguments using the ArgumentList parameter
					#Important: Do not access form controls from this script block.
					Get-WmiObject Win32_Process -Namespace "root\CIMV2"
				}`
				-CompletedScript {
					Param($Job)		
					$results = Receive-Job -Job $Job		
				}`
				-UpdateScript {
					Param($Job)
					#$results = Receive-Job -Job $Job -Keep
				}
		
			.LINK
				
		#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		#Start the Job
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($null -ne $job)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{
				'Job'			   = $Job;
				'CompleteScript'   = $CompletedScript;
				'UpdateScript'	   = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerJobTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($null -ne $psObject)
			{
				if ($null -ne $psObject.Job)
				{
					if ($psObject.Job.State -eq 'Blocked')
					{
						#Try to unblock the job
						Receive-Job $psObject.Job | Out-Null
					}
					elseif ($psObject.Job.State -ne 'Running')
					{
						#Call the Complete Script Block
						if ($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif ($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start() #Resume the timer	
		}
	}
	
	function Stop-JobTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all Jobs from the list.
		#>
		#Stop the timer
		$timerJobTracker.Stop()
		
		#Remove all the jobs
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	
	$formManateeCountyUSMT10_Closed = [System.Windows.Forms.FormClosedEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#Stop any pending jobs
		Stop-JobTracker
		if (Test-Path "$env:TEMP\ScanState.log")
		{
			Copy-Item "$env:TEMP\ScanState.log" $sScanStateLogPath -Force
		}
		if (Test-Path "$env:TEMP\LoadState.log")
		{
			Copy-Item "$env:TEMP\LoadState.log" $sLoadStateLogPath -Force
		}
		
	}
	
	$timerJobTracker_Tick = {
		Update-JobTracker
	}
	#endregion
	
	$TableLayout_Paint = [System.Windows.Forms.PaintEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
		#TODO: Place custom script here
		
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formManateeCountyUSMT10.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$BackupButton.remove_Click($BackupButton_Click)
			$EstimateButton.remove_Click($EstimateButton_Click)
			$RestoreButton.remove_Click($RestoreButton_Click)
			$UpdateButton.remove_Click($UpdateButton_Click)
			$StopButton.remove_Click($StopButton_Click)
			$TableLayout.remove_Paint($TableLayout_Paint)
			$formManateeCountyUSMT10.remove_FormClosed($formManateeCountyUSMT10_Closed)
			$formManateeCountyUSMT10.remove_Load($formManateeCountyUSMT10_Load)
			$formManateeCountyUSMT10.remove_Resize($DeSelectTextFix)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$formManateeCountyUSMT10.remove_Load($Form_StateCorrection_Load)
			$formManateeCountyUSMT10.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formManateeCountyUSMT10.SuspendLayout()
	$TableLayout.SuspendLayout()
	#
	# formManateeCountyUSMT10
	#
	$formManateeCountyUSMT10.Controls.Add($TableLayout)
	$formManateeCountyUSMT10.AutoScaleDimensions = '9, 18'
	$formManateeCountyUSMT10.AutoScaleMode = 'Font'
	$formManateeCountyUSMT10.AutoSize = $True
	$formManateeCountyUSMT10.AutoSizeMode = 'GrowAndShrink'
	$formManateeCountyUSMT10.BackColor = 'Control'
	$formManateeCountyUSMT10.ClientSize = '876, 531'
	$formManateeCountyUSMT10.Font = 'Microsoft Sans Serif, 11pt'
	$formManateeCountyUSMT10.Margin = '4, 4, 4, 4'
	$formManateeCountyUSMT10.MinimumSize = '892, 539'
	$formManateeCountyUSMT10.Name = 'formManateeCountyUSMT10'
	$formManateeCountyUSMT10.Text = 'Manatee County USMT 1.0'
	$formManateeCountyUSMT10.add_FormClosed($formManateeCountyUSMT10_Closed)
	$formManateeCountyUSMT10.add_Load($formManateeCountyUSMT10_Load)
	$formManateeCountyUSMT10.add_Resize($DeSelectTextFix)
	#
	# TableLayout
	#
	$TableLayout.Controls.Add($BackupLabel, 0, 1)
	$TableLayout.Controls.Add($ShareList, 0, 0)
	$TableLayout.Controls.Add($StatusBox, 0, 3)
	$TableLayout.Controls.Add($ProgressBar, 0, 4)
	$TableLayout.Controls.Add($BackupButton, 2, 2)
	$TableLayout.Controls.Add($EstimateButton, 1, 2)
	$TableLayout.Controls.Add($BackupUserName, 0, 2)
	$TableLayout.Controls.Add($RestoreButton, 4, 2)
	$TableLayout.Controls.Add($UpdateButton, 4, 0)
	$TableLayout.Controls.Add($StopButton, 4, 4)
	$TableLayout.Controls.Add($RestoreName, 3, 2)
	$TableLayout.Controls.Add($RestoreLabel, 3, 1)
	$TableLayout.Controls.Add($OutputBox, 3, 6)
	$TableLayout.Controls.Add($tailbutton, 0, 5)
	$TableLayout.AutoSize = $True
	$TableLayout.AutoSizeMode = 'GrowAndShrink'
	$TableLayout.BackColor = 'White'
	$TableLayout.BackgroundImageLayout = 'Stretch'
	$TableLayout.ColumnCount = 5
	$System_Windows_Forms_ColumnStyle_1 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 35)
	[void]$TableLayout.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_1)
	$System_Windows_Forms_ColumnStyle_2 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 10)
	[void]$TableLayout.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_2)
	$System_Windows_Forms_ColumnStyle_3 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 10)
	[void]$TableLayout.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_3)
	$System_Windows_Forms_ColumnStyle_4 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 35)
	[void]$TableLayout.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_4)
	$System_Windows_Forms_ColumnStyle_5 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 10)
	[void]$TableLayout.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_5)
	$TableLayout.Dock = 'Fill'
	$TableLayout.Location = '0, 0'
	$TableLayout.Margin = '4, 4, 4, 4'
	$TableLayout.MinimumSize = '800, 600'
	$TableLayout.Name = 'TableLayout'
	$TableLayout.RowCount = 7
	$System_Windows_Forms_RowStyle_6 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 40)
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_6)
	$System_Windows_Forms_RowStyle_7 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 40)
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_7)
	$System_Windows_Forms_RowStyle_8 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 40)
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_8)
	$System_Windows_Forms_RowStyle_9 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 40)
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_9)
	$System_Windows_Forms_RowStyle_10 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 40)
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_10)
	$System_Windows_Forms_RowStyle_11 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 40)
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_11)
	$System_Windows_Forms_RowStyle_12 = New-Object 'System.Windows.Forms.RowStyle'
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_12)
	$System_Windows_Forms_RowStyle_13 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 20)
	[void]$TableLayout.RowStyles.Add($System_Windows_Forms_RowStyle_13)
	$TableLayout.Size = '876, 600'
	$TableLayout.TabIndex = 7
	$TableLayout.add_Paint($TableLayout_Paint)
	#
	# BackupLabel
	#
	$BackupLabel.Anchor = 'Top, Bottom, Left, Right'
	$BackupLabel.AutoSize = $True
	$BackupLabel.BackColor = 'ActiveCaption'
	$TableLayout.SetColumnSpan($BackupLabel, 3)
	$BackupLabel.Font = 'Microsoft Sans Serif, 11pt'
	$BackupLabel.Location = '4, 44'
	$BackupLabel.Margin = '4, 4, 4, 4'
	$BackupLabel.Name = 'BackupLabel'
	$BackupLabel.Size = '472, 32'
	$BackupLabel.TabIndex = 0
	$BackupLabel.Text = 'Backup'
	$BackupLabel.TextAlign = 'MiddleCenter'
	#
	# ShareList
	#
	$ShareList.Anchor = 'Top, Bottom, Left, Right'
	$TableLayout.SetColumnSpan($ShareList, 4)
	$ShareList.Font = 'Microsoft Sans Serif, 11pt'
	$ShareList.FormattingEnabled = $True
	$ShareList.Location = '4, 4'
	$ShareList.Margin = '4, 4, 4, 4'
	$ShareList.Name = 'ShareList'
	$ShareList.Size = '778, 26'
	$ShareList.TabIndex = 1
	#
	# StatusBox
	#
	$StatusBox.Anchor = 'Top, Bottom, Left, Right'
	$TableLayout.SetColumnSpan($StatusBox, 5)
	$StatusBox.Font = 'Microsoft Sans Serif, 12pt, style=Bold'
	$StatusBox.Location = '4, 124'
	$StatusBox.Margin = '4, 4, 4, 4'
	$StatusBox.Name = 'StatusBox'
	$StatusBox.Size = '868, 26'
	$StatusBox.TabIndex = 0
	$StatusBox.TabStop = $False
	#
	# ProgressBar
	#
	$ProgressBar.Anchor = 'Top, Bottom, Left, Right'
	$TableLayout.SetColumnSpan($ProgressBar, 4)
	$ProgressBar.Location = '4, 164'
	$ProgressBar.Margin = '4, 4, 4, 4'
	$ProgressBar.Name = 'ProgressBar'
	$ProgressBar.Size = '778, 32'
	$ProgressBar.TabIndex = 0
	#
	# BackupButton
	#
	$BackupButton.Anchor = 'Top, Bottom, Left, Right'
	$BackupButton.AutoSize = $True
	$BackupButton.AutoSizeMode = 'GrowAndShrink'
	$BackupButton.Font = 'Microsoft Sans Serif, 11pt'
	$BackupButton.Location = '397, 84'
	$BackupButton.Margin = '4, 4, 4, 4'
	$BackupButton.Name = 'BackupButton'
	$BackupButton.Size = '79, 32'
	$BackupButton.TabIndex = 5
	$BackupButton.Text = 'Backup'
	$BackupButton.UseVisualStyleBackColor = $True
	$BackupButton.add_Click($BackupButton_Click)
	#
	# EstimateButton
	#
	$EstimateButton.Anchor = 'Top, Bottom, Left, Right'
	$EstimateButton.AutoSize = $True
	$EstimateButton.Font = 'Microsoft Sans Serif, 11pt'
	$EstimateButton.Location = '310, 84'
	$EstimateButton.Margin = '4, 4, 4, 4'
	$EstimateButton.Name = 'EstimateButton'
	$EstimateButton.Size = '79, 32'
	$EstimateButton.TabIndex = 4
	$EstimateButton.Text = 'Estimate'
	$EstimateButton.UseVisualStyleBackColor = $True
	$EstimateButton.add_Click($EstimateButton_Click)
	#
	# BackupUserName
	#
	$BackupUserName.Anchor = 'Top, Bottom, Left, Right'
	$BackupUserName.DropDownStyle = 'DropDownList'
	$BackupUserName.Enabled = $False
	$BackupUserName.Font = 'Microsoft Sans Serif, 11pt'
	$BackupUserName.FormattingEnabled = $True
	$BackupUserName.Location = '4, 84'
	$BackupUserName.Margin = '4, 4, 4, 4'
	$BackupUserName.MinimumSize = '100, 0'
	$BackupUserName.Name = 'BackupUserName'
	$BackupUserName.Size = '298, 26'
	$BackupUserName.TabIndex = 3
	#
	# RestoreButton
	#
	$RestoreButton.Anchor = 'Top, Bottom, Left, Right'
	$RestoreButton.AutoSize = $True
	$RestoreButton.AutoSizeMode = 'GrowAndShrink'
	$RestoreButton.Font = 'Microsoft Sans Serif, 11pt'
	$RestoreButton.Location = '790, 84'
	$RestoreButton.Margin = '4, 4, 4, 4'
	$RestoreButton.Name = 'RestoreButton'
	$RestoreButton.Size = '82, 32'
	$RestoreButton.TabIndex = 7
	$RestoreButton.Text = 'Restore'
	$RestoreButton.UseVisualStyleBackColor = $True
	$RestoreButton.add_Click($RestoreButton_Click)
	#
	# UpdateButton
	#
	$UpdateButton.Anchor = 'Top, Bottom, Left, Right'
	$UpdateButton.Font = 'Microsoft Sans Serif, 11pt'
	$UpdateButton.Location = '790, 4'
	$UpdateButton.Margin = '4, 4, 4, 4'
	$UpdateButton.Name = 'UpdateButton'
	$UpdateButton.Size = '82, 32'
	$UpdateButton.TabIndex = 2
	$UpdateButton.Text = 'Update'
	$UpdateButton.UseVisualStyleBackColor = $True
	$UpdateButton.add_Click($UpdateButton_Click)
	#
	# StopButton
	#
	$StopButton.Anchor = 'Top, Bottom, Left, Right'
	$StopButton.AutoSize = $True
	$StopButton.AutoSizeMode = 'GrowAndShrink'
	$StopButton.Enabled = $False
	$StopButton.Font = 'Microsoft Sans Serif, 11pt'
	$StopButton.Location = '790, 164'
	$StopButton.Margin = '4, 4, 4, 4'
	$StopButton.Name = 'StopButton'
	$StopButton.Size = '82, 32'
	$StopButton.TabIndex = 8
	$StopButton.Text = 'Stop'
	$StopButton.UseVisualStyleBackColor = $True
	$StopButton.add_Click($StopButton_Click)
	#
	# RestoreName
	#
	$RestoreName.Anchor = 'Top, Bottom, Left, Right'
	$RestoreName.DropDownStyle = 'DropDownList'
	$RestoreName.Enabled = $False
	$RestoreName.Font = 'Microsoft Sans Serif, 11pt'
	$RestoreName.FormattingEnabled = $True
	$RestoreName.Location = '484, 84'
	$RestoreName.Margin = '4, 4, 4, 4'
	$RestoreName.MinimumSize = '100, 0'
	$RestoreName.Name = 'RestoreName'
	$RestoreName.Size = '298, 26'
	$RestoreName.TabIndex = 6
	#
	# RestoreLabel
	#
	$RestoreLabel.Anchor = 'Top, Bottom, Left, Right'
	$RestoreLabel.AutoSize = $True
	$RestoreLabel.BackColor = 'LightGreen'
	$TableLayout.SetColumnSpan($RestoreLabel, 2)
	$RestoreLabel.Font = 'Microsoft Sans Serif, 11pt'
	$RestoreLabel.Location = '484, 44'
	$RestoreLabel.Margin = '4, 4, 4, 4'
	$RestoreLabel.Name = 'RestoreLabel'
	$RestoreLabel.Size = '388, 32'
	$RestoreLabel.TabIndex = 0
	$RestoreLabel.Text = 'Restore'
	$RestoreLabel.TextAlign = 'MiddleCenter'
	#
	# OutputBox
	#
	$OutputBox.Anchor = 'Top, Bottom, Left, Right'
	$TableLayout.SetColumnSpan($OutputBox, 5)
	$OutputBox.Location = '4, 244'
	$OutputBox.Margin = '4, 4, 4, 4'
	$OutputBox.MinimumSize = '598, 137'
	$OutputBox.Name = 'OutputBox'
	$OutputBox.Size = '868, 352'
	$OutputBox.TabIndex = 0
	$OutputBox.TabStop = $False
	$OutputBox.Text = ''
	#
	# tailbutton
	#
	$tailbutton.Anchor = 'Top, Bottom, Left, Right'
	$TableLayout.SetColumnSpan($tailbutton, 6)
	$tailbutton.Enabled = $False
	$tailbutton.Location = '4, 204'
	$tailbutton.Margin = '4, 4, 4, 4'
	$tailbutton.Name = 'tailbutton'
	$tailbutton.Size = '868, 32'
	$tailbutton.TabIndex = 9
	$tailbutton.UseVisualStyleBackColor = $True
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	$TableLayout.ResumeLayout()
	$formManateeCountyUSMT10.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formManateeCountyUSMT10.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formManateeCountyUSMT10.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formManateeCountyUSMT10.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formManateeCountyUSMT10.ShowDialog()

} #End Function

#Call the form
Show-ManateeUsmt_psf | Out-Null
